"""
Manejadores para la gesti√≥n de contenido web.
"""

import logging
import uuid
import json
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler
from telegram.constants import ParseMode
from core.states import State, state_manager
import models.site
import models.user

# Importar desde nuestro m√≥dulo de compatibilidad
from utils.compat import Filters, CallbackContext

# Configuraci√≥n de logging
logger = logging.getLogger(__name__)

# Rutas de archivos JSON para plantillas
TEMPLATES_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'data', 'templates')
POSTS_TEMPLATE = os.path.join(TEMPLATES_DIR, 'posts.json')
CATEGORIES_TEMPLATE = os.path.join(TEMPLATES_DIR, 'categories.json')
TAGS_TEMPLATE = os.path.join(TEMPLATES_DIR, 'tags.json')

async def newpost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador para el comando /newpost."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    logger.info(f"Usuario {user.id} inici√≥ la creaci√≥n de un nuevo post")
    
    # Verificar si el usuario tiene un sitio configurado
    # TODO: Comprobar en la base de datos
    # De momento, simulamos que tiene un sitio configurado
    
    # Cambiar el estado a CREATING_CONTENT
    state_manager.set_state(user.id, State.CREATING_CONTENT)
    
    # Solicitar el t√≠tulo del post
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "üìù <b>Crear Nuevo Post</b>\n\n"
            "Vamos a crear un nuevo art√≠culo para tu sitio web.\n\n"
            "Por favor, escribe el <b>t√≠tulo</b> del art√≠culo:"
        ),
        parse_mode=ParseMode.HTML
    )
    
    # Guardamos el paso actual en el estado
    state_manager.set_data(user.id, "content_step", "waiting_title")

async def process_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa el t√≠tulo enviado por el usuario."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    title = update.message.text.strip()
    
    # Validar el t√≠tulo (debe tener al menos 10 caracteres)
    if len(title) < 10:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è El t√≠tulo es demasiado corto. Debe tener al menos 10 caracteres. Int√©ntalo de nuevo:"
        )
        return
    
    # Guardar el t√≠tulo
    state_manager.set_data(user.id, "post_title", title)
    
    # Generar un slug a partir del t√≠tulo
    slug = title.lower()
    # Eliminar caracteres especiales y espacios
    import re
    slug = re.sub(r'[^a-z0-9√°√©√≠√≥√∫√±\s]', '', slug)
    # Reemplazar acentos
    replacements = {
        '√°': 'a', '√©': 'e', '√≠': 'i', '√≥': 'o', '√∫': 'u',
        '√±': 'n'
    }
    for a, b in replacements.items():
        slug = slug.replace(a, b)
    # Reemplazar espacios por guiones
    slug = re.sub(r'\s+', '-', slug)
    
    state_manager.set_data(user.id, "post_slug", slug)
    
    # Solicitar la descripci√≥n
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "‚úÖ T√≠tulo guardado.\n\n"
            "Ahora, escribe una <b>descripci√≥n breve</b> para el art√≠culo (m√°ximo 250 caracteres):"
        ),
        parse_mode=ParseMode.HTML
    )
    
    # Actualizar el paso actual
    state_manager.set_data(user.id, "content_step", "waiting_description")

async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la descripci√≥n enviada por el usuario."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    description = update.message.text.strip()
    
    # Validar la descripci√≥n
    if len(description) < 20:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è La descripci√≥n es demasiado corta. Debe tener al menos 20 caracteres. Int√©ntalo de nuevo:"
        )
        return
    
    if len(description) > 250:
        description = description[:247] + "..."
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è La descripci√≥n era demasiado larga y ha sido truncada."
        )
    
    # Guardar la descripci√≥n
    state_manager.set_data(user.id, "post_description", description)
    
    # Solicitar la URL o contenido
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "‚úÖ Descripci√≥n guardada.\n\n"
            "Ahora, tienes dos opciones:\n"
            "1) Enviar una <b>URL externa</b> (si es un recorte de otra web)\n"
            "2) Escribir <code>/contenido</code> para comenzar a escribir el contenido HTML"
        ),
        parse_mode=ParseMode.HTML
    )
    
    # Actualizar el paso actual
    state_manager.set_data(user.id, "content_step", "waiting_url_or_content")

async def process_url_or_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la URL o la indicaci√≥n de contenido enviada por el usuario."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    
    if text.lower() == "/contenido":
        # El usuario quiere escribir contenido HTML
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "üìÑ <b>Redacci√≥n de Contenido</b>\n\n"
                "Por favor, escribe o pega el contenido HTML de tu art√≠culo. "
                "Puedes usar etiquetas b√°sicas como <code>&lt;p&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;ul&gt;</code>, etc.\n\n"
                "Cuando hayas terminado, escribe <code>/fin</code> en una l√≠nea separada."
            ),
            parse_mode=ParseMode.HTML
        )
        
        # Inicializar el buffer de contenido
        state_manager.set_data(user.id, "content_buffer", "")
        
        # Actualizar el paso actual
        state_manager.set_data(user.id, "content_step", "waiting_content")
    
    elif text.startswith("http://") or text.startswith("https://"):
        # El usuario ha enviado una URL
        state_manager.set_data(user.id, "post_url", text)
        
        # Solicitar la categor√≠a
        await request_category(update, context)
    
    else:
        # Entrada no v√°lida
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚ö†Ô∏è Por favor, env√≠a una URL v√°lida (que comience con http:// o https://) "
                "o escribe <code>/contenido</code> para redactar el contenido HTML."
            ),
            parse_mode=ParseMode.HTML
        )

async def process_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa el contenido HTML enviado por el usuario."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text
    
    if text.strip() == "/fin":
        # El usuario ha terminado de escribir contenido
        content_buffer = state_manager.get_data(user.id, "content_buffer", "")
        
        if not content_buffer:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è No has escrito ning√∫n contenido. Por favor, escribe algo antes de finalizar:"
            )
            return
        
        # Guardar el contenido final
        html_content = content_buffer.strip()
        
        # TODO: Procesar y validar el HTML
        
        # Generar la URL del post basada en el slug y categor√≠a (por defecto "general")
        category = "general"
        slug = state_manager.get_data(user.id, "post_slug")
        url = f"/{category}/{slug}.html"
        
        state_manager.set_data(user.id, "post_url", url)
        
        # Solicitar la categor√≠a
        await request_category(update, context)
    
    else:
        # Agregar el texto al buffer de contenido
        content_buffer = state_manager.get_data(user.id, "content_buffer", "")
        content_buffer += text + "\n"
        state_manager.set_data(user.id, "content_buffer", content_buffer)
        
        # Confirmar recepci√≥n
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ Contenido recibido. Contin√∫a escribiendo o env√≠a /fin cuando hayas terminado."
        )

async def request_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Solicita al usuario que seleccione una categor√≠a."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # Cargar categor√≠as disponibles desde el archivo JSON de plantilla
    try:
        with open(CATEGORIES_TEMPLATE, 'r', encoding='utf-8') as f:
            categories_data = json.load(f)
            categories = categories_data['categories']
    except Exception as e:
        logger.error(f"Error al cargar las categor√≠as: {e}")
        categories = [
            {"id": "desarrollo", "name": "Desarrollo"},
            {"id": "salud", "name": "Salud"},
            {"id": "alimentacion", "name": "Alimentaci√≥n"},
            {"id": "crianza", "name": "Crianza"},
            {"id": "embarazo", "name": "Embarazo"},
            {"id": "pareja", "name": "Pareja"}
        ]
    
    # Crear teclado con las categor√≠as
    keyboard = []
    row = []
    for i, category in enumerate(categories):
        row.append(InlineKeyboardButton(category['name'], callback_data=f"content:category:{category['id']}"))
        if (i + 1) % 2 == 0 or i == len(categories) - 1:
            keyboard.append(row)
            row = []
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "üîñ <b>Selecciona una categor√≠a para tu art√≠culo:</b>"
        ),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    # Actualizar el paso actual
    state_manager.set_data(user.id, "content_step", "waiting_category")

async def process_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Procesa la imagen enviada por el usuario."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # Comprobar si se envi√≥ una imagen
    if update.message.photo:
        # Obtener la foto de mayor resoluci√≥n
        photo = update.message.photo[-1]
        file_id = photo.file_id
        
        # TODO: Descargar y procesar la imagen
        # Por ahora, simulamos una URL
        image_url = f"https://example.com/uploads/{file_id}.jpg"
        
        # Guardar la URL de la imagen
        state_manager.set_data(user.id, "post_image", image_url)
        
        # Mostrar resumen y solicitar confirmaci√≥n
        await show_post_summary(update, context)
    
    elif update.message.text and (update.message.text.startswith("http://") or update.message.text.startswith("https://")):
        # El usuario ha enviado una URL de imagen
        image_url = update.message.text.strip()
        
        # TODO: Validar que la URL sea una imagen
        
        # Guardar la URL de la imagen
        state_manager.set_data(user.id, "post_image", image_url)
        
        # Mostrar resumen y solicitar confirmaci√≥n
        await show_post_summary(update, context)
    
    else:
        # No es una imagen v√°lida
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚ö†Ô∏è Por favor, env√≠a una imagen o una URL de imagen v√°lida (que comience con http:// o https://)."
            )
        )

async def show_post_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra un resumen del post y solicita confirmaci√≥n."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # Obtener los datos del post
    title = state_manager.get_data(user.id, "post_title")
    description = state_manager.get_data(user.id, "post_description")
    url = state_manager.get_data(user.id, "post_url")
    image = state_manager.get_data(user.id, "post_image")
    category = state_manager.get_data(user.id, "post_category")
    slug = state_manager.get_data(user.id, "post_slug")
    
    # Crear botones de confirmaci√≥n
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Publicar", callback_data="content:confirm:publish"),
            InlineKeyboardButton("‚ùå Cancelar", callback_data="content:confirm:cancel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "<b>üìã Resumen del Post</b>\n\n"
            f"<b>T√≠tulo:</b> {title}\n"
            f"<b>Descripci√≥n:</b> {description}\n"
            f"<b>URL:</b> {url}\n"
            f"<b>Imagen:</b> {image if image else 'No especificada'}\n"
            f"<b>Categor√≠a:</b> {category}\n"
            f"<b>Slug:</b> {slug}\n\n"
            "¬øDeseas publicar este art√≠culo?"
        ),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    
    # Actualizar el paso actual
    state_manager.set_data(user.id, "content_step", "waiting_confirmation")

async def content_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gestiona los callbacks relacionados con la creaci√≥n de contenido."""
    query = update.callback_query
    user = update.effective_user
    data_parts = query.data.split(":")
    action = data_parts[1]
    
    await query.answer()
    
    if action == "category":
        category_id = data_parts[2]
        
        # Cargar categor√≠as para obtener el nombre
        try:
            with open(CATEGORIES_TEMPLATE, 'r', encoding='utf-8') as f:
                categories_data = json.load(f)
                categories = {cat['id']: cat['name'] for cat in categories_data['categories']}
                category_name = categories.get(category_id, category_id.capitalize())
        except Exception as e:
            logger.error(f"Error al cargar las categor√≠as: {e}")
            category_name = category_id.capitalize()
        
        # Guardar la categor√≠a
        state_manager.set_data(user.id, "post_category", category_name)
        state_manager.set_data(user.id, "post_category_id", category_id)
        
        # Actualizar la URL con la categor√≠a correcta
        slug = state_manager.get_data(user.id, "post_slug")
        url = f"/{category_id}/{slug}.html"
        state_manager.set_data(user.id, "post_url", url)
        
        # Solicitar imagen
        await query.edit_message_text(
            text=(
                "‚úÖ Categor√≠a seleccionada: <b>{}</b>\n\n"
                "Ahora, por favor env√≠a una <b>imagen destacada</b> para el art√≠culo.\n"
                "Puedes subir una imagen directamente o enviar una URL de imagen."
            ).format(category_name),
            parse_mode=ParseMode.HTML
        )
        
        # Actualizar el paso actual
        state_manager.set_data(user.id, "content_step", "waiting_image")
    
    elif action == "confirm":
        if data_parts[2] == "publish":
            # Publicar el post
            # Obtener los datos del post
            title = state_manager.get_data(user.id, "post_title")
            description = state_manager.get_data(user.id, "post_description")
            url = state_manager.get_data(user.id, "post_url")
            image = state_manager.get_data(user.id, "post_image")
            category = state_manager.get_data(user.id, "post_category")
            category_id = state_manager.get_data(user.id, "post_category_id")
            slug = state_manager.get_data(user.id, "post_slug")
            
            # Generar un ID √∫nico
            post_id = str(uuid.uuid4())
            
            # Crear objeto de post
            new_post = {
                "id": post_id,
                "title": title,
                "description": description,
                "url": url,
                "image": image,
                "date": datetime.now().strftime("%Y-%m-%d"),
                "category": category,
                "slug": slug
            }
            
            # Intentar subir el post al servidor v√≠a SFTP
            try:
                # Importamos la funci√≥n de subida SFTP
                from ..sftp.handlers import upload_post_to_sftp
                
                # Mensaje de estado temporal
                await query.edit_message_text(
                    text="üîÑ Preparando para subir el contenido al servidor..."
                )
                
                # Llamar a la funci√≥n de subida
                upload_result = await upload_post_to_sftp(update, context, new_post)
                
                if not upload_result:
                    # Si la subida fall√≥ pero no lanz√≥ excepci√≥n, mostramos mensaje informativo
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=(
                            "‚ÑπÔ∏è <b>Informaci√≥n</b>\n\n"
                            "Tu art√≠culo se ha creado correctamente, pero no se ha podido subir al servidor.\n\n"
                            "Puedes configurar la conexi√≥n SFTP con /sftp_config y volver a intentarlo m√°s tarde."
                        ),
                        parse_mode=ParseMode.HTML
                    )
                
                # Guardamos el post en el estado del usuario (historial)
                user_posts = state_manager.get_data(user.id, "user_posts", [])
                user_posts.append(new_post)
                state_manager.set_data(user.id, "user_posts", user_posts)
                
            except ImportError:
                # Si el m√≥dulo SFTP no est√° disponible
                await query.edit_message_text(
                    text=(
                        "üéâ <b>¬°Post Creado Exitosamente!</b>\n\n"
                        f"Tu art√≠culo '<b>{title}</b>' ha sido creado.\n\n"
                        "‚ö†Ô∏è El m√≥dulo SFTP no est√° disponible. No se ha podido subir al servidor."
                    ),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                # Si ocurre un error durante la subida
                logger.error(f"Error al subir post: {e}")
                await query.edit_message_text(
                    text=(
                        "üéâ <b>¬°Post Creado Exitosamente!</b>\n\n"
                        f"Tu art√≠culo '<b>{title}</b>' ha sido creado.\n\n"
                        f"‚ö†Ô∏è Error al subir al servidor: {str(e)}"
                    ),
                    parse_mode=ParseMode.HTML
                )
            
            # Limpiar estado
            state_manager.set_state(user.id, State.IDLE)
            state_manager.clear_user_data(user.id)
            
            logger.info(f"Usuario {user.id} complet√≥ la creaci√≥n de un post: {title}")
        
        elif data_parts[2] == "cancel":
            await query.edit_message_text(
                text="‚ùå Creaci√≥n de post cancelada. Puedes intentarlo nuevamente usando /newpost."
            )
            
            # Limpiar estado
            state_manager.set_state(user.id, State.IDLE)
            state_manager.clear_user_data(user.id)
            
            logger.info(f"Usuario {user.id} cancel√≥ la creaci√≥n de un post")
    
    elif action == "edit":
        # Manejar selecci√≥n de post para editar
        if data_parts[2] == "cancel":
            await query.edit_message_text(
                text="‚ùå Edici√≥n cancelada."
            )
            state_manager.set_state(user.id, State.IDLE)
        else:
            # Cargar post para edici√≥n
            post_id = data_parts[2]
            await load_post_for_editing(update, context, post_id)
    
    elif action == "edit_field":
        # Manejar selecci√≥n de campo a editar
        field = data_parts[2]
        await request_edit_field(update, context, field)
    
    elif action == "edit_save":
        # Manejar confirmaci√≥n/cancelaci√≥n de guardar cambios
        if data_parts[2] == "confirm":
            # Obtener los datos del post
            post_id = state_manager.get_data(user.id, "editing_post_id")
            title = state_manager.get_data(user.id, "post_title")
            description = state_manager.get_data(user.id, "post_description")
            url = state_manager.get_data(user.id, "post_url")
            image = state_manager.get_data(user.id, "post_image")
            category = state_manager.get_data(user.id, "post_category")
            slug = state_manager.get_data(user.id, "post_slug")
            
            # Actualizar el post
            updated_post = {
                "id": post_id,
                "title": title,
                "description": description,
                "url": url,
                "image": image,
                "date": datetime.now().strftime("%Y-%m-%d"),
                "category": category,
                "slug": slug
            }
            
            # Actualizar lista de posts del usuario
            user_posts = state_manager.get_data(user.id, "user_posts", [])
            for i, post in enumerate(user_posts):
                if post.get('id') == post_id:
                    user_posts[i] = updated_post
                    break
            
            state_manager.set_data(user.id, "user_posts", user_posts)
            
            # Intentar subir el post actualizado al servidor v√≠a SFTP
            try:
                # Importamos la funci√≥n de subida SFTP
                from ..sftp.handlers import upload_post_to_sftp
                
                # Mensaje de estado temporal
                await query.edit_message_text(
                    text="üîÑ Preparando para subir los cambios al servidor..."
                )
                
                # Llamar a la funci√≥n de subida
                upload_result = await upload_post_to_sftp(update, context, updated_post)
                
                if not upload_result:
                    # Si la subida fall√≥ pero no lanz√≥ excepci√≥n, mostramos mensaje informativo
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=(
                            "‚ÑπÔ∏è <b>Informaci√≥n</b>\n\n"
                            "Tu art√≠culo se ha actualizado correctamente, pero no se ha podido subir al servidor.\n\n"
                            "Puedes configurar la conexi√≥n SFTP con /sftp_config y volver a intentarlo m√°s tarde."
                        ),
                        parse_mode=ParseMode.HTML
                    )
                
            except ImportError:
                # Si el m√≥dulo SFTP no est√° disponible
                await query.edit_message_text(
                    text=(
                        "‚úÖ <b>¬°Post Actualizado Exitosamente!</b>\n\n"
                        f"Tu art√≠culo '<b>{title}</b>' ha sido actualizado.\n\n"
                        "‚ö†Ô∏è El m√≥dulo SFTP no est√° disponible. No se ha podido subir al servidor."
                    ),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                # Si ocurre un error durante la subida
                logger.error(f"Error al subir post actualizado: {e}")
                await query.edit_message_text(
                    text=(
                        "‚úÖ <b>¬°Post Actualizado Exitosamente!</b>\n\n"
                        f"Tu art√≠culo '<b>{title}</b>' ha sido actualizado.\n\n"
                        f"‚ö†Ô∏è Error al subir al servidor: {str(e)}"
                    ),
                    parse_mode=ParseMode.HTML
                )
            
            # Limpiar estado
            state_manager.set_state(user.id, State.IDLE)
            state_manager.clear_user_data(user.id)
            
            logger.info(f"Usuario {user.id} complet√≥ la edici√≥n del post: {title}")
        
        elif data_parts[2] == "cancel":
            await query.edit_message_text(
                text="‚ùå Edici√≥n cancelada."
            )
            state_manager.set_state(user.id, State.IDLE)
            state_manager.clear_user_data(user.id)

async def process_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str):
    """Procesa el nuevo valor para el campo que se est√° editando."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    query = update.callback_query
    
    # Guardar el campo que se est√° editando
    state_manager.set_data(user.id, "editing_field", field)
    
    # Dependiendo del campo, mostrar mensaje apropiado
    if field == "title":
        current_value = state_manager.get_data(user.id, "post_title", "")
        await query.edit_message_text(
            text=(
                "üìù <b>Editar T√≠tulo</b>\n\n"
                f"T√≠tulo actual: <i>{current_value}</i>\n\n"
                "Env√≠a el nuevo t√≠tulo para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "description":
        current_value = state_manager.get_data(user.id, "post_description", "")
        await query.edit_message_text(
            text=(
                "üìã <b>Editar Descripci√≥n</b>\n\n"
                f"Descripci√≥n actual: <i>{current_value[:100]}...</i>\n\n"
                "Env√≠a la nueva descripci√≥n para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "content":
        current_url = state_manager.get_data(user.id, "post_url", "")
        await query.edit_message_text(
            text=(
                "üåê <b>Editar Contenido</b>\n\n"
                f"URL actual: <i>{current_url}</i>\n\n"
                "Env√≠a una nueva URL o el contenido HTML para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "image":
        current_image = state_manager.get_data(user.id, "post_image", "")
        if current_image:
            # Mostrar la imagen actual
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=current_image,
                caption="Imagen actual"
            )
        
        await query.edit_message_text(
            text=(
                "üñºÔ∏è <b>Editar Imagen</b>\n\n"
                "Env√≠a una nueva imagen para tu art√≠culo o una URL de imagen:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "category":
        # Similar a la creaci√≥n de post, mostrar categor√≠as disponibles
        await request_category(update, context)
        return

async def content_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador de mensajes para el m√≥dulo de contenido."""
    user = update.effective_user
    
    # Verificar si el usuario est√° en proceso de creaci√≥n de contenido
    if state_manager.get_state(user.id) == State.CREATING_CONTENT:
        current_step = state_manager.get_data(user.id, "content_step")
        
        if current_step == "waiting_title":
            await process_title(update, context)
            return True
        elif current_step == "waiting_description":
            await process_description(update, context)
            return True
        elif current_step == "waiting_url_or_content":
            await process_url_or_content(update, context)
            return True
        elif current_step == "waiting_content":
            await process_content(update, context)
            return True
        elif current_step == "waiting_image":
            await process_image(update, context)
            return True
    
    # Verificar si el usuario est√° en proceso de edici√≥n de contenido
    elif state_manager.get_state(user.id) == State.EDITING_CONTENT:
        # Si hay un campo espec√≠fico en edici√≥n, procesarlo
        if state_manager.get_data(user.id, "editing_field"):
            handled = await process_edit_field(update, context)
            if handled:
                return True
    
    # Si no est√° en proceso de creaci√≥n o edici√≥n, dejamos que otros manejadores procesen el mensaje
    return False

async def editpost_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Manejador para el comando /editpost."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    logger.info(f"Usuario {user.id} inici√≥ la edici√≥n de un post")
    
    # Cambiar el estado a EDITING_CONTENT
    state_manager.set_state(user.id, State.EDITING_CONTENT)
    
    # Obtener los posts del usuario (desde el estado o simulados para este ejemplo)
    user_posts = state_manager.get_data(user.id, "user_posts", [])
    
    if not user_posts:
        # Si no hay posts, intentar cargar desde una simulaci√≥n
        try:
            # Cargar posts desde plantilla como ejemplo
            templates_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                                         'data', 'templates')
            with open(os.path.join(templates_dir, 'posts.json'), 'r', encoding='utf-8') as f:
                posts_data = json.load(f)
                user_posts = posts_data.get("posts", [])
            
            if not user_posts:
                raise ValueError("No hay posts disponibles")
                
        except Exception as e:
            logger.error(f"Error al cargar posts de ejemplo: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=(
                    "‚ùå <b>No hay posts disponibles</b>\n\n"
                    "No se encontraron posts para editar. Crea un nuevo post con /newpost primero."
                ),
                parse_mode=ParseMode.HTML
            )
            state_manager.set_state(user.id, State.IDLE)
            return
    
    # Limitar a 10 posts para evitar botones excesivos
    user_posts = user_posts[:10]
    
    # Crear teclado con los posts disponibles
    keyboard = []
    for post in user_posts:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìù {post['title'][:30]}...", 
                callback_data=f"content:edit:{post['id']}"
            )
        ])
    
    # A√±adir bot√≥n para cancelar
    keyboard.append([
        InlineKeyboardButton(
            text="‚ùå Cancelar", 
            callback_data="content:edit:cancel"
        )
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Mostrar mensaje con los posts disponibles
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "üìã <b>Editar Art√≠culo</b>\n\n"
            "Selecciona el art√≠culo que deseas editar:"
        ),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def load_post_for_editing(update: Update, context: ContextTypes.DEFAULT_TYPE, post_id: str):
    """Carga un post para su edici√≥n."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    query = update.callback_query
    
    # Obtener posts del usuario
    user_posts = state_manager.get_data(user.id, "user_posts", [])
    
    # Si no hay posts en el estado, intentar cargar desde plantilla
    if not user_posts:
        try:
            templates_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                                         'data', 'templates')
            with open(os.path.join(templates_dir, 'posts.json'), 'r', encoding='utf-8') as f:
                posts_data = json.load(f)
                user_posts = posts_data.get("posts", [])
        except Exception as e:
            logger.error(f"Error al cargar posts de plantilla: {e}")
    
    # Buscar el post por ID
    selected_post = None
    for post in user_posts:
        if post.get('id') == post_id:
            selected_post = post
            break
    
    if not selected_post:
        await query.edit_message_text(
            text=(
                "‚ùå <b>Error</b>\n\n"
                "No se encontr√≥ el art√≠culo seleccionado."
            ),
            parse_mode=ParseMode.HTML
        )
        state_manager.set_state(user.id, State.IDLE)
        return
    
    # Guardar datos del post en el estado
    state_manager.set_data(user.id, "editing_post_id", post_id)
    state_manager.set_data(user.id, "post_original", selected_post)
    state_manager.set_data(user.id, "post_title", selected_post.get('title', ''))
    state_manager.set_data(user.id, "post_description", selected_post.get('description', ''))
    state_manager.set_data(user.id, "post_url", selected_post.get('url', ''))
    state_manager.set_data(user.id, "post_image", selected_post.get('image', ''))
    state_manager.set_data(user.id, "post_category", selected_post.get('category', ''))
    state_manager.set_data(user.id, "post_slug", selected_post.get('slug', ''))
    
    # Crear teclado con opciones de edici√≥n
    keyboard = [
        [InlineKeyboardButton(text="üìù T√≠tulo", callback_data="content:edit_field:title")],
        [InlineKeyboardButton(text="üìã Descripci√≥n", callback_data="content:edit_field:description")],
        [InlineKeyboardButton(text="üåê Contenido", callback_data="content:edit_field:content")],
        [InlineKeyboardButton(text="üñºÔ∏è Imagen", callback_data="content:edit_field:image")],
        [InlineKeyboardButton(text="üìÅ Categor√≠a", callback_data="content:edit_field:category")],
        [InlineKeyboardButton(text="‚úÖ Guardar Cambios", callback_data="content:edit_save:confirm")],
        [InlineKeyboardButton(text="‚ùå Cancelar", callback_data="content:edit_save:cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Mostrar resumen del post a editar
    await query.edit_message_text(
        text=(
            f"üìù <b>Editando: {selected_post['title']}</b>\n\n"
            f"<b>Descripci√≥n:</b> {selected_post['description'][:100]}...\n"
            f"<b>Categor√≠a:</b> {selected_post['category']}\n\n"
            "Selecciona qu√© campo deseas editar:"
        ),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def request_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str):
    """Solicita al usuario que edite un campo espec√≠fico del post."""
    user = update.effective_user
    chat_id = update.effective_chat.id
    query = update.callback_query
    
    # Guardar el campo que se est√° editando
    state_manager.set_data(user.id, "editing_field", field)
    
    # Dependiendo del campo, mostrar mensaje apropiado
    if field == "title":
        current_value = state_manager.get_data(user.id, "post_title", "")
        await query.edit_message_text(
            text=(
                "üìù <b>Editar T√≠tulo</b>\n\n"
                f"T√≠tulo actual: <i>{current_value}</i>\n\n"
                "Env√≠a el nuevo t√≠tulo para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "description":
        current_value = state_manager.get_data(user.id, "post_description", "")
        await query.edit_message_text(
            text=(
                "üìã <b>Editar Descripci√≥n</b>\n\n"
                f"Descripci√≥n actual: <i>{current_value[:100]}...</i>\n\n"
                "Env√≠a la nueva descripci√≥n para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "content":
        current_url = state_manager.get_data(user.id, "post_url", "")
        await query.edit_message_text(
            text=(
                "üåê <b>Editar Contenido</b>\n\n"
                f"URL actual: <i>{current_url}</i>\n\n"
                "Env√≠a una nueva URL o el contenido HTML para tu art√≠culo:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "image":
        current_image = state_manager.get_data(user.id, "post_image", "")
        if current_image:
            # Mostrar la imagen actual
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=current_image,
                caption="Imagen actual"
            )
        
        await query.edit_message_text(
            text=(
                "üñºÔ∏è <b>Editar Imagen</b>\n\n"
                "Env√≠a una nueva imagen para tu art√≠culo o una URL de imagen:"
            ),
            parse_mode=ParseMode.HTML
        )
    
    elif field == "category":
        # Similar a la creaci√≥n de post, mostrar categor√≠as disponibles
        await request_category(update, context)
        return

def setup_content_handlers(application):
    """Configura los manejadores para el m√≥dulo de contenido."""
    # A√±adir manejadores de comandos
    application.add_handler(CommandHandler("newpost", newpost_command))
    application.add_handler(CommandHandler("editpost", editpost_command))
    
    # A√±adir manejador de callbacks
    application.add_handler(CallbackQueryHandler(content_callback, pattern=r"^content:"))
    
    # A√±adir manejador de mensajes (prioridad alta)
    application.add_handler(MessageHandler(Filters.TEXT | Filters.PHOTO, content_message_handler), group=1)
    
    logger.info("Manejadores de contenido configurados correctamente") 